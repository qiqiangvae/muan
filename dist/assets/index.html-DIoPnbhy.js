import{_ as t,c as n,e,o as i}from"./app-B0Ppf8HT.js";const s={};function h(r,a){return i(),n("div",null,a[0]||(a[0]=[e('<h1 id="http相关知识点记录" tabindex="-1"><a class="header-anchor" href="#http相关知识点记录"><span>HTTP相关知识点记录</span></a></h1><p>从事开发工作这么多年了，一直没有系统的了解过网络协议和Http协议，正好最近在看罗剑锋老师的《透视HTTP协议》，所以在此做一个总结，记录一些知识点。</p><div class="hint-container info"><p class="hint-container-title">引用说明</p><p>本文部分资料引用来自于<a href="https://time.geekbang.org/column/intro/100029001?tab=catalog" target="_blank" rel="noopener noreferrer">极客时间《透视 HTTP 协议》。</a></p></div><h2 id="计算机网络基础" tabindex="-1"><a class="header-anchor" href="#计算机网络基础"><span>计算机网络基础</span></a></h2><h3 id="tcp-ip-网络分层模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip-网络分层模型"><span>TCP/IP 网络分层模型</span></a></h3><p>TCP/IP 网络分层模型分为四次，从下到上分别是 <strong>链路层</strong>、<strong>网络层</strong>、<strong>传输层</strong>、<strong>应用层</strong>。</p><table><thead><tr><th>分层</th><th>相关协议</th></tr></thead><tbody><tr><td>应用层</td><td>SSH 协议、FTP 协议、SMTP 协议、HTTP协议</td></tr><tr><td>传输层</td><td>TCP 协议、UDP 协议</td></tr><tr><td>网际层</td><td>IP 协议</td></tr><tr><td>链路层</td><td></td></tr></tbody></table><ol><li>链路层。负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层</li><li>网际层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了</li><li>传输层。这个层次协议的职责是保证数据在 IP 地址标记的两点之间“可靠”地传输，是 TCP 协议工作的层次，另外还有它的一个“小伙伴”UDP</li><li>应用层。</li></ol><h4 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议"><span>TCP 协议</span></a></h4><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/43CoBZ.jpg" alt="43CoBZ"></p><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/G8mq0q.jpg" alt="G8mq0q"></p><h5 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h5><ol><li>客户端向服务端发送一段 TCP 报文SYN=1,seq=x，SYN=1表示请求建立新的连接，seq=x表示序号为x，随后客户端进入同步发送状态。</li><li>服务端收到报文后，发送一段 TCP 报文SYN=1,ACK=1,seq=y,ack=x+1给客户端。标志位SYN=1,ACK=1表示确认收到客户端的报文 seq 序号有效，服务器能正常接收到客户端发送的数据，并同意建立连接。seq=y,ack=x+1表示发送一个y的序号给客户端，并且将客户端发送的seq+1作为确认号发送给客户端。</li><li>客户端收到服务端返回的报文后，发送报文ACK=1,seq=x+1,ack=y+1给服务器，告诉服务器自己收到的序号有效，并且继续从x+1处发送报文，确认号是服务器返回的seq+1。</li></ol><h5 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h5><p>挥手阶段是指一方主动要求断开连接。这里以客户端主动要求断开连接为例进行说明。</p><ol><li>客户端发送报文FIN=1,seq=u给服务端，FIN=1表示要断开连接，序号是seq=u。</li><li>服务端收到报文后，回复报文ACK=1,seq=v,ack=u+1给客户端，ACK=1表示请求断开连接的序列号有效，服务端发送的数据到v了，确认号是u+1。然后服务端继续向客户端发送数据。</li><li>当服务端的数据发送完成之后，服务端发送报文FIN=1,ACK=1,seq=w,ack=u+1给客户端，告诉客户端服务端的数据以及发送完成了，这个确认号ack=u+1是客户端上次请求断开连接的序号。</li><li>客户端收到服务端发送的报文后，发送报文ACK=1,seq=u+1,ack=w+1给服务端，告诉服务端自己已经收到了断开连接的请求，接下来彼此不在进行数据交换了。然后客户端进入时间等待状态，这个状态必不可少，因为如果第四次挥手服务端没有接收到，会无法完成断开连接，这个阶段是为了接收服务端的再一次第三次挥手。</li></ol><h5 id="数据包" tabindex="-1"><a class="header-anchor" href="#数据包"><span>数据包</span></a></h5><p>Flag 标志位:</p><ul><li>URG: 紧急指针有效</li><li>ACK: 确认序列号有效</li><li>PSH: 接收方应该尽快</li><li>RST: 重置连接</li><li>SYN: 发起一个新的连接</li><li>FIN: 释放一个连接。</li></ul><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/OdpFMt.jpg" alt="OdpFMt"></p><h4 id="ip-协议" tabindex="-1"><a class="header-anchor" href="#ip-协议"><span>IP 协议</span></a></h4><h3 id="osi-7层协议" tabindex="-1"><a class="header-anchor" href="#osi-7层协议"><span>OSI 7层协议</span></a></h3><p>OSI全称是“开放式系统互联通信参考模型”（Open System Interconnection Reference Model）。</p><table><thead><tr><th>OSI 分层</th><th>说明</th></tr></thead><tbody><tr><td>应用层</td><td>面向具体的应用传输数据</td></tr><tr><td>表现层</td><td>把数据转换为合适、可理解的语法和语义</td></tr><tr><td>会话层</td><td>维护网络中的连接状态，即保持会话和同步</td></tr><tr><td>传输层</td><td>相当于 TCP/IP 里的传输层</td></tr><tr><td>网络层</td><td>相当于 TCP/IP 里的网际层</td></tr><tr><td>数据链路层</td><td>它基本相当于 TCP/IP 的链接层</td></tr><tr><td>物理层</td><td>网络的物理形式，例如电缆、光纤、网卡、集线器等等</td></tr></tbody></table><h2 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念"><span>一些概念</span></a></h2><h3 id="cdn" tabindex="-1"><a class="header-anchor" href="#cdn"><span>CDN</span></a></h3><p>CDN的全称是内容分发网络（Content Delivery Network）。</p><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h3><h3 id="uri-和-url-的区别" tabindex="-1"><a class="header-anchor" href="#uri-和-url-的区别"><span>URI 和 URL 的区别</span></a></h3><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/DX8yTh.jpg" alt="DX8yTh"></p><h2 id="http-组成" tabindex="-1"><a class="header-anchor" href="#http-组成"><span>Http 组成</span></a></h2><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h3><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/PpgMNl.jpg" alt="PpgMNl"></p><p>请求数据包括</p><p><img src="https://qiqiang.oss-cn-hangzhou.aliyuncs.com/muan/PnyudN.jpg" alt="PnyudN"></p><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h3><h3 id="body-体" tabindex="-1"><a class="header-anchor" href="#body-体"><span>Body 体</span></a></h3><h2 id="一些问题" tabindex="-1"><a class="header-anchor" href="#一些问题"><span>一些问题</span></a></h2><h3 id="在浏览器输入一个-url-请求-背后的执行过程" tabindex="-1"><a class="header-anchor" href="#在浏览器输入一个-url-请求-背后的执行过程"><span>在浏览器输入一个 url 请求，背后的执行过程</span></a></h3><ol><li>浏览器查找本地域名缓存，将域名解析为 IP 地址，如果找不到则去操作系统缓存查找，再找不到就去本地 hosts 文件中查找，如果还是找不到就去 DNS 服务器查找，总之是要找到这个域名对应的 IP 地址。</li><li>将 http 请求封装成请求包，包括头信息和 body 体。</li><li>将 http 请求包封装成 TCP 包。</li><li>将 TCP 包封装成 IP 包。</li><li>到达数据链路层则需要将数据包传输到目标机器上，这时候需要找到目标机器在哪里。根据本机IP与子网掩码做 and 操作，同目标 IP 与子网掩码做 and 操作的结果做比较，如果一致，则说明是在同一子网内部，那么说明可以通过广播将数据包传输出去了如果不一致，则需要将数据包丢给网关转发出去。</li></ol>',40)]))}const l=t(s,[["render",h],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/dev/4c4217/","title":"HTTP相关知识点记录","lang":"en-US","frontmatter":{"title":"HTTP相关知识点记录","createTime":"2022-07-19T11:07:55.000Z","permalink":"/dev/4c4217/"},"headers":[],"readingTime":{"minutes":5.15,"words":1544},"git":{"updatedTime":1733107453000,"contributors":[{"name":"qiqiang","email":"qiqiang@pingpongx.com","commits":3,"avatar":"https://avatars.githubusercontent.com/qiqiang?v=4","url":"https://github.com/qiqiang"},{"name":"qiqiang","email":"qiqiang","commits":3,"avatar":"https://avatars.githubusercontent.com/qiqiang?v=4","url":"https://github.com/qiqiang"}]},"filePathRelative":"notes/dev/50.HTTP相关知识点记录.md","bulletin":false}');export{l as comp,p as data};
