import{_ as t,c as d,e as s,o as p}from"./app-DITZCmiV.js";const e={};function h(n,a){return p(),d("div",null,a[0]||(a[0]=[s('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>数据：数据是数据库中存储的基本对象，是描述事物的符号记录。</p><p>数据的种类：文本、图形、图像、音频、视频</p><p>数据库：是长期存储在计算机内、有组织的、可共享的大量数据的集合。</p><p>数据库的基本特征：</p><ol><li>数据是按一定数据模型组织、描述、和存储；</li><li>可为各种用户共享；</li><li>冗余度较小；</li><li>数据独立性较高；</li><li>易扩展；</li></ol><p>数据库系统：</p><p>数据库管理系统：</p><h2 id="三级模式-两级映射" tabindex="-1"><a class="header-anchor" href="#三级模式-两级映射"><span>三级模式-两级映射</span></a></h2><h3 id="三级模式" tabindex="-1"><a class="header-anchor" href="#三级模式"><span>三级模式</span></a></h3><h4 id="内模式" tabindex="-1"><a class="header-anchor" href="#内模式"><span>内模式</span></a></h4><p>管理如何存储物理的数据，对应具体物理存储文件。</p><h4 id="概念模式" tabindex="-1"><a class="header-anchor" href="#概念模式"><span>概念模式</span></a></h4><p>简称模式，是数据库中的基本表。根据应用、需求将物理数据划分成一张张表。</p><h4 id="外模式" tabindex="-1"><a class="header-anchor" href="#外模式"><span>外模式</span></a></h4><p>对应数据库中的视图这个级别，将表进行一定的处理后再提供给用户使用。</p><h3 id="两级映射" tabindex="-1"><a class="header-anchor" href="#两级映射"><span>两级映射</span></a></h3><h4 id="外模式-模式映像" tabindex="-1"><a class="header-anchor" href="#外模式-模式映像"><span>外模式-模式映像</span></a></h4><p>表和视图之间的映射，存在于概念级和外部级之间，若表中数据发生了修改，只需要修改此映射，而无需修改应用程序。</p><h4 id="模式-内模式映像" tabindex="-1"><a class="header-anchor" href="#模式-内模式映像"><span>模式-内模式映像</span></a></h4><p>是表和数据的物理存储之间的映射，存在于概念级和内部级之间，所修改了数据存储方式，只需要修改此映射，而不需要去修改应用程序。</p><h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计"><span>数据库设计</span></a></h2><h3 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析"><span>需求分析</span></a></h3><p>即分析数据存储的要求，产出物有数据流图、数据字典、需求说明书。获得用户对系统的三个要求：信息要求、处理要求、系统要求。</p><h3 id="概念结构设计" tabindex="-1"><a class="header-anchor" href="#概念结构设计"><span>概念结构设计</span></a></h3><p>这个阶段是设计 E-R 图，即实体-联系图。工作步骤包括：选择局部应用、逐一设计分 E-R 图、E-R图合并。</p><p>分 E-R 图进行合并时，他们之间存在的冲突主要有以下三类：</p><ol><li>属性冲突。同一属性可能会存在于不同的分 E-R 图中。</li><li>命名冲突。相同意义的属性，在不同的分 E-R 图上有着不同的命名，或者是名称相同的属性在不同的分 E-R 图中代表着不同的意义。</li><li>结构冲突。同一实体在不同的分 E-R 图中有着不同的属性，同一对象在某一分 E-R 图中被抽象为实体，而在另一分 E-R 图中又被抽象为属性。</li></ol><h3 id="逻辑结构设计" tabindex="-1"><a class="header-anchor" href="#逻辑结构设计"><span>逻辑结构设计</span></a></h3><p>将 E-R 图转换成关系模式。工作步骤包括：确定数据模型、将 E-R 图转换成指定的数据模型、确定完整性约束和确定用户视图。</p><h3 id="物理设计" tabindex="-1"><a class="header-anchor" href="#物理设计"><span>物理设计</span></a></h3><p>确定数据分布、存储结构和访问方式。</p><h3 id="数据库实施阶段" tabindex="-1"><a class="header-anchor" href="#数据库实施阶段"><span>数据库实施阶段</span></a></h3><p>根据逻辑设计和物理设计阶段的结果建立数据库、编制与调式应用程序，组织数据入库，并进行试运行。</p><h3 id="数据库运行和维护阶段" tabindex="-1"><a class="header-anchor" href="#数据库运行和维护阶段"><span>数据库运行和维护阶段</span></a></h3><p>数据库应用系统经过试运行即可投入运行，但该阶段需要不断地对系统进行评价、调整与修改。</p><h2 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h2><h3 id="四种数据模型" tabindex="-1"><a class="header-anchor" href="#四种数据模型"><span>四种数据模型</span></a></h3><h4 id="关系模型" tabindex="-1"><a class="header-anchor" href="#关系模型"><span>关系模型</span></a></h4><p>关系模型师二维表的形式表示的实体-联系模型，是将实体-联系模型转换而来的，经开发人员设计的。</p><h4 id="概念模型" tabindex="-1"><a class="header-anchor" href="#概念模型"><span>概念模型</span></a></h4><p>概念模型是从用户的角度进行建模的，是现实世界到信息世界的第一抽象，是真正的实体-联系模型。</p><h4 id="网状模型" tabindex="-1"><a class="header-anchor" href="#网状模型"><span>网状模型</span></a></h4><p>网状模型是表示实体类型及其实体之间的联系，一个事物和另外几个都有联系形成一张网。</p><h4 id="面向对象模型" tabindex="-1"><a class="header-anchor" href="#面向对象模型"><span>面向对象模型</span></a></h4><p>面向对象模型是采用面向对象的方法设计数据库，以对象为单位，每个对象包括属性和方法，具有类和继承等特点。</p><h3 id="数据模型三要素" tabindex="-1"><a class="header-anchor" href="#数据模型三要素"><span>数据模型三要素</span></a></h3><ol><li>数据结构。所研究的对象类型的集合；</li><li>数据操作。对数据库中的各种对象的实例允许执行的操作集合（一般是增删改查）。</li><li>数据的约束条件。一组完整性规则的集合。</li></ol><h3 id="e-r-图" tabindex="-1"><a class="header-anchor" href="#e-r-图"><span>E-R 图</span></a></h3><p>用 E-R 图来描述概念数据模型，世界是由一组称作实体的基本对象和这些对象之间的联系构成的。</p><p>在 E-R 模型中，使用椭圆表示属性（一般没有）、长方形表示实体、菱形表示联系、联系的两端要填写联系类型。</p><h4 id="e-r-模型转换为关系模型" tabindex="-1"><a class="header-anchor" href="#e-r-模型转换为关系模型"><span>E-R 模型转换为关系模型</span></a></h4><p>每个实体都对应一个关系模式</p><p>一对一联系中，联系可以放在任意的两端实体中，作为一个属性，页可以转换为一个单独的关系模式；</p><p>一对N的联系中，联系可以单据作为一个关系模式，也可以在N端中键入一端实体的主键；</p><p>M对N的联系中，联系必须作为一个单独的关系模式，其主键是M和N端的联合主键；</p><h2 id="关系代数" tabindex="-1"><a class="header-anchor" href="#关系代数"><span>关系代数</span></a></h2><h3 id="并集-s1-∪-s2" tabindex="-1"><a class="header-anchor" href="#并集-s1-∪-s2"><span>并集 S1 ∪ S2</span></a></h3><p>结果是两张表中所有记录数的合并，相同记录只显示一次。</p><h3 id="交集-s1-∩-s2" tabindex="-1"><a class="header-anchor" href="#交集-s1-∩-s2"><span>交集 S1 ∩ S2</span></a></h3><p>结果是两张表中相同的记录。</p><h3 id="差集-s1-s2" tabindex="-1"><a class="header-anchor" href="#差集-s1-s2"><span>差集 S1 - S2</span></a></h3><p>结果是 S1 表中有但是 S2 表中没有的记录。</p><h3 id="笛卡尔积-s1-×-s2" tabindex="-1"><a class="header-anchor" href="#笛卡尔积-s1-×-s2"><span>笛卡尔积 S1 × S2</span></a></h3><p>产生的结果包括 S1 和 S2 的所有属性列，并且 S1 中每条记录一次和 S2 中所有记录组合成一条记录，最终属性列为 S1+S2 属性列，记录数为 S1 * S2 记录数。重复的列会显示。</p><h3 id="投影-π" tabindex="-1"><a class="header-anchor" href="#投影-π"><span>投影 π</span></a></h3><p>按条件选择某关系模式中的某列，列也可以用数字表示。</p><h3 id="选择-σ" tabindex="-1"><a class="header-anchor" href="#选择-σ"><span>选择 σ</span></a></h3><p>按条件选择某关系模式中的某条记录。</p><h3 id="自然连接-s1-⋈-s2" tabindex="-1"><a class="header-anchor" href="#自然连接-s1-⋈-s2"><span>自然连接 S1 ⋈ S2</span></a></h3><p>自然连接的结果是显示全部的属性列，但是相同的属性列只显示一次，显示两个关系模式中<strong>属性相同且值相同</strong>的记录。</p><p>如下有关系S1</p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td></tr><tr><td>b</td><td>a</td><td>d</td></tr><tr><td>c</td><td>d</td><td>e</td></tr><tr><td>d</td><td>f</td><td>g</td></tr></tbody></table><p>关系S2</p><table><thead><tr><th>A</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a</td><td>c</td><td>d</td></tr><tr><td>d</td><td>f</td><td>g</td></tr><tr><td>b</td><td>d</td><td>g</td></tr></tbody></table><p>S1 和 S2 自然连接的结果如下：</p><p>因为 S1 和 S2由两个相同的列 A 和 C，那么去掉重复的列之后，剩下的是 A B C D，那么寻找两个关系中 A 列和 C 列中值相同的行数记录下来</p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td><td>d</td></tr><tr><td>b</td><td>a</td><td>d</td><td>g</td></tr></tbody></table><h2 id="函数依赖" tabindex="-1"><a class="header-anchor" href="#函数依赖"><span>函数依赖</span></a></h2><p>给定一个 <code>x</code>，能唯一确定一个 <code>y</code>，就称 <code>x</code> 确定 <code>y</code>，或者说 y 依赖于 x，例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">y=x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 函数。</p><p>函数依赖又可以扩展一下两种原则：</p><p>部分函数依赖：A 可以确定 C，(A,B)也可以确定 C，因为(A,B)中的一部分 A 可以确定 C，所以称为部分函数依赖。</p><p>传递函数依赖：当 A 和 B 不等价时，A 可确定 B，B 可确定 C，则 A 可确定 C，是传递函数依赖；若 A 和 B 等价，则不存在传递，直接就可以确定 C。</p><h2 id="键与约束" tabindex="-1"><a class="header-anchor" href="#键与约束"><span>键与约束</span></a></h2><p>给定一张用户表，有如下字段：</p><table><thead><tr><th>字段名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>user_id</td><td>用户唯一 ID</td><td>1001</td></tr><tr><td>user_name</td><td>用户名</td><td>张三</td></tr><tr><td>id_card</td><td>身份证号</td><td>330105202002025256</td></tr><tr><td>contact_information</td><td>联系方式</td><td>杭州市上城区 XXX 号</td></tr><tr><td>company_id</td><td>公司ID</td><td>2001</td></tr></tbody></table><ul><li><p>超建：能唯一标识此表的属性集合，只要能标识唯一就行，比如<code>user_id+user_name</code>，<code>id_card+user_name</code>都可以作为超键。</p></li><li><p>候选键：超建中去掉冗余的属性，剩余的属性就是候选键。比如 user_id 和 id_card 都是候选键。</p></li><li><p>主键：任选一个候选键，即可作为主键。user_id 和 id_card 任意选一个作为主键。</p></li><li><p>外键：其它表中的主键。company_id 是一个外键；</p></li><li><p>主属性：候选键内的属性作为主属性，其它属性作为非主属性。</p></li><li><p>实体完整性约束：即主键约束，主键值不能为空，也不能重复。</p></li><li><p>参照完整性约束：即外键约束，外键必须是其他表中已经存在的主键的值，或者为空。</p></li><li><p>用户自定义完整性约束：自定义表达式约束，如设定年龄属性的值必须在0到150之间。</p></li></ul><h2 id="范式" tabindex="-1"><a class="header-anchor" href="#范式"><span>范式</span></a></h2><h3 id="第一范式-1nf" tabindex="-1"><a class="header-anchor" href="#第一范式-1nf"><span>第一范式 1NF</span></a></h3><p>关系中的每一个分量必须是一个不可分的数据项。</p><h3 id="第二范式-2nf-消除部分函数依赖" tabindex="-1"><a class="header-anchor" href="#第二范式-2nf-消除部分函数依赖"><span>第二范式 2NF（消除部分函数依赖）</span></a></h3><p>如果关系 R 属于 1NF，且每一个非主属性完全函数依赖属于任何一个候选码，则 R 属于 2NF。</p><p>换句话说，2NF 就是在 1NF 的基础上，表中的每一个非主属性不会依赖于符合主键中的某一个列。</p><p>举例，存在如下一张学生表，有以下字段:</p><table><thead><tr><th>字段名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>student_no</td><td>学号</td><td>20230101</td></tr><tr><td>student_name</td><td>学生姓名</td><td>张三</td></tr><tr><td>department</td><td>系编号</td><td>01</td></tr><tr><td>department_name</td><td>系名称</td><td>数学系</td></tr><tr><td>department_director</td><td>系主任姓名</td><td>张主任</td></tr><tr><td>course</td><td>课程</td><td>数学分析</td></tr><tr><td>score</td><td>课程分数</td><td>99</td></tr></tbody></table><p>一个学号是一个学生；一个学号只能在一个系、一个学号可以选多个课程。</p><p>可以将学生表分解为如下：</p><p>学生表（学号、学生姓名、系编号、系名、系主任）</p><p>选课表（学号、课程号、成绩）</p><h3 id="第三范式-消除传递依赖" tabindex="-1"><a class="header-anchor" href="#第三范式-消除传递依赖"><span>第三范式（消除传递依赖）</span></a></h3><p>在满足 1NF 的基础上，表中不存在非主属性对键的传递依赖。</p><p>可以将学生表分解为如下：</p><p>学生表（学号、学生姓名、系编号）</p><p>系表（系编号、系名、系主任）</p><p>选课表（学号、课程号、成绩）</p><h3 id="bc-范式" tabindex="-1"><a class="header-anchor" href="#bc-范式"><span>BC 范式</span></a></h3><p>在第三范式的基础上进一步消除主属性对于码的部分函数依赖和传递依赖。就是说在某一种情况下，每一个依赖的左边决定因素都必然包含候选键。</p><h2 id="模式分解" tabindex="-1"><a class="header-anchor" href="#模式分解"><span>模式分解</span></a></h2><p>范式之间的转换一般是通过拆分属性，即模式分解，将具有部分函数依赖和传递依赖的属性分离开，来达到优化的目的。</p><h3 id="保持函数依赖分解" tabindex="-1"><a class="header-anchor" href="#保持函数依赖分解"><span>保持函数依赖分解</span></a></h3><p>如存在关系模式 R，有依赖集 F，若对 R 进行模式分解，分解出来的多个关系模式，保持原来的依赖集不变，则是保持函数依赖分解。</p><p>如有关系模式 R(A,B,C) ，依赖集 F(A-&gt;B,B-&gt;C,A-&gt;C)，将其分解为两个关系函数依赖 R1(A,B)，R2(B,C),此时 R1 中保持函数依赖 A-&gt;B，R2 中保持函数依赖 B-&gt;C，而 A-&gt;C实际是一个冗余依赖，因为可以通过前两个依赖推倒出来，所以说明 R1 和 R2 保持函数依赖的分解。（注意，这个方法只能说明保持函数依赖，如果不满足这个条件，并不能说明不保持函数依赖，这是个充分条件而不是个必要条件）。</p><p>示例：有关系模式 R&lt;U, F&gt;，U={A, B, C, D, E}，F={B -&gt; A, D -&gt; A, A -&gt; E, AC -&gt; B}，则 R 的候选关键字为 <strong>CD</strong></p><p>思路如下：</p><ol><li>列举出所有的属性 A B C D E；</li><li>将依赖中的右边全部划掉 <s>A</s> <s>B</s> C D <s>E</s>，剩下 C 和 D；</li><li>然后根据依赖关系，看看能否根据 C 和 D 推出 ABE： <ol><li>A 可以根据 D 推出；</li><li>B 需要根据 AC 推出，而 D 可以推出 A，搜易 CD 可以推出 B；</li><li>E 可以根据 A 退出来，所以 D 可以推出 E；</li><li>所以 CD 可以推出 ABE；</li></ol></li></ol><h3 id="无损分解" tabindex="-1"><a class="header-anchor" href="#无损分解"><span>无损分解</span></a></h3><p>分解后的关系模式能够还原出原关系模式，就是无损分解，不能还原就是有损。</p><p>当分解为两个关系模式时，可以通过一下定理判断是否无损分解：</p><p><strong>定理</strong>：如果 R 的分解是 p={R1, R2}，F 为 R 所满足的函数依赖集合，分解 p 具有无损连接性的充分必要条件是 <code>R1 ∩ R2 -&gt; R1 - R2</code>或者 <code>R2 ∩ R1 -&gt; R2 - R1</code>。</p><p>当分解为三个及以上关系模式时，可以通过表格发求解，如下：</p><p>由关系模式 成绩（学号，姓名，课程号，课程名，分数）</p><p>函数依赖为 F（学号 -&gt; 姓名，课程号 -&gt; 课程名，（学号，课程名）-&gt; 分数），如果将其分解为：</p><ol><li>成绩（学号，课程号，分数）</li><li>学生（学号，姓名）</li><li>课程（课程号，课程名）</li></ol><p>可以通过表格发判断是否为无损分解。</p><p>初始表格如下：</p><table><thead><tr><th></th><th>学号</th><th>姓名</th><th>课程号</th><th>课程名</th><th>分数</th></tr></thead><tbody><tr><td>成绩</td><td>√</td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>学生</td><td>√</td><td>√</td><td></td><td></td><td></td></tr><tr><td>课程</td><td></td><td></td><td>√</td><td>√</td><td></td></tr></tbody></table><p>根据函数依赖，可以</p><ol><li>从学号推出姓名，那么可以将<strong>成绩</strong>这一行中的<strong>姓名</strong>打勾；</li><li>从课程号推出课程名，那么可以将<strong>成绩</strong>这一行中的课程名打勾;</li></ol><p>那么修正后的表格如下所示：</p><table><thead><tr><th></th><th>学号</th><th>姓名</th><th>课程号</th><th>课程名</th><th>分数</th></tr></thead><tbody><tr><td>成绩</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>学生</td><td>√</td><td>√</td><td></td><td></td><td></td></tr><tr><td>课程</td><td></td><td></td><td>√</td><td>√</td><td></td></tr></tbody></table><p>可以看到其中成绩一行所有的列都是勾选的，所以该分解满足无损分解。</p><h2 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制"><span>并发控制</span></a></h2><p>事务四大特性，原子性、一致性、隔离性、持续性</p><h3 id="事务间的影响" tabindex="-1"><a class="header-anchor" href="#事务间的影响"><span>事务间的影响</span></a></h3><p>丢失更新：当前事务修改的数据被另一个事务修改了。</p><p>不可重复度：读两次数据的结果不一致，是因为另一个事物修改了这个数据。</p><p>脏读：当前事务读读到了另一个事务未提交的数据。</p><p>幻读：两次查询到的数据行数不一致，因为两次查询之间被别的事务插入了数据。</p><h3 id="封锁协议" tabindex="-1"><a class="header-anchor" href="#封锁协议"><span>封锁协议</span></a></h3><h4 id="排它锁-x-写锁" tabindex="-1"><a class="header-anchor" href="#排它锁-x-写锁"><span>排它锁 X（写锁）</span></a></h4><p>当前事务给数据加了排它锁之后，其它事务不能对该数据进行任何操作，只允许当前事务对该数据进行操作。</p><h4 id="共享锁-s-读锁" tabindex="-1"><a class="header-anchor" href="#共享锁-s-读锁"><span>共享锁 S（读锁）</span></a></h4><p>当前事务给数据加了共享锁之后，其它事务不能对该数据进行更新操作，但是其他事务页可以给该数据加上共享锁读取该数据。</p><h4 id="三级封锁协议" tabindex="-1"><a class="header-anchor" href="#三级封锁协议"><span>三级封锁协议</span></a></h4><p>一级：事务在修改数据之前必须对其加上写锁，写完数据之后释放写锁。可以解决丢失更新的问题。</p><p>二级：在读取数据之前必须对其加读锁，读完后释放读锁。可以解决丢失更新、读脏数据的问题。</p><p>三级：在读取数据之前必须对其加读锁，直到事务解释之后释放读锁。可以解决丢失更新、读脏数据、和不可重复度的问题。</p><h2 id="数据库安全" tabindex="-1"><a class="header-anchor" href="#数据库安全"><span>数据库安全</span></a></h2><h3 id="备份" tabindex="-1"><a class="header-anchor" href="#备份"><span>备份</span></a></h3><h4 id="静态备份" tabindex="-1"><a class="header-anchor" href="#静态备份"><span>静态备份</span></a></h4><p>冷备份。在转储期间不允许对数据库进行任何操作。</p><p>优点：备份快速，容易归档。</p><p>缺点：只能提供备份某一时间点上的回复，不能做其他工作，不能按表或者用户恢复。</p><h4 id="动态转储" tabindex="-1"><a class="header-anchor" href="#动态转储"><span>动态转储</span></a></h4><p>热备份。在转储期间允许对数据库进行操作，转储和用户事务可以并发执行。</p><p>优点：可在表空间或数据库文件级备份，数据库仍可使用，可达到秒级恢复。</p><p>缺点：备份不能出错，若热备份不成功，所得结果几乎全部无效。</p><h4 id="完全备份" tabindex="-1"><a class="header-anchor" href="#完全备份"><span>完全备份</span></a></h4><p>备份所有数据</p><h4 id="差量备份" tabindex="-1"><a class="header-anchor" href="#差量备份"><span>差量备份</span></a></h4><p>仅备份<strong>上一次完全备份</strong>之后变化的数据。</p><h4 id="增量备份" tabindex="-1"><a class="header-anchor" href="#增量备份"><span>增量备份</span></a></h4><p>备份<strong>上一次备份</strong>之后变化的数据。</p><h2 id="分布式数据库" tabindex="-1"><a class="header-anchor" href="#分布式数据库"><span>分布式数据库</span></a></h2><p>局部数据库位于不同的物理位置，使用一个全局数据库管理系统将所有局部数据库联网管理。</p><h3 id="分片模式" tabindex="-1"><a class="header-anchor" href="#分片模式"><span>分片模式</span></a></h3><p>水平分片：将表中的数据分别存放在不同的地方。</p><p>垂直分片：将表中的垂直的列值分别存放在不同的地方。</p><h3 id="分布透明性" tabindex="-1"><a class="header-anchor" href="#分布透明性"><span>分布透明性</span></a></h3><p>分片透明性：用户或应用程序不需要知道逻辑上访问的表具体是如何分块存储的。</p><p>位置透明性：应用程序不关心数据存储物理位置的改变。</p><p>逻辑透明性：用户或应用程序无需知道局部使用的是哪种数据模型。</p><p>复制透明性：用户或应用程序不关系复制的数据从何而来。</p><h2 id="数据仓库" tabindex="-1"><a class="header-anchor" href="#数据仓库"><span>数据仓库</span></a></h2><p>数据仓库是一个面向主题的、集成的、非易失的、随时间变化的数据集合，用于支持管理决策。</p><p>数据仓库的结构通常包含四个层次：</p><ol><li>数据源：是数据仓库系统的基础，是整个系统的数据来源。</li><li>数据的存储与管理：是整个数据仓库系统的核心。</li><li>OLAP（联机分析处理）：对分析需要的数据进行有效集成，按多维模型组织，以便进行多角度、多层次的分析，并发现趋势。</li><li>前端工具：主要包括各种报表工具、查询工具、数据分析工具、数据挖掘工具以及各种基础仓库数据或数据集市的应用开发工具。</li></ol><h2 id="反规范化技术" tabindex="-1"><a class="header-anchor" href="#反规范化技术"><span>反规范化技术</span></a></h2><p>规范化设计后，数据库设计者希望牺牲部分规范化来提高性能。</p><p>优点：降低连接操作的需求，降低外码和索引的数据，还可能减少表的问题，能够提高查询效率。</p><p>缺点：数据的重复存储，浪费了磁盘空间；可能出现数据的完整性问题，为了保障数据的一致性，增加了数据维护的复杂性，会降低修改速度。</p><p>具体的方法：</p><ol><li>增加冗余列；</li><li>增加派生列；</li><li>重新组表；</li><li>水平分割表；</li><li>垂直分割表；</li></ol>',183)]))}const i=t(e,[["render",h],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/note/system-architecture/database/","title":"数据库","lang":"en-US","frontmatter":{"title":"数据库","createTime":"2022-06-02T18:53:20.000Z","permalink":"/note/system-architecture/database/"},"headers":[],"readingTime":{"minutes":14.93,"words":4478},"git":{"updatedTime":1732511545000,"contributors":[{"name":"qiqiang","email":"qiqiang@pingpongx.com","commits":3,"avatar":"https://avatars.githubusercontent.com/qiqiang?v=4","url":"https://github.com/qiqiang"},{"name":"Quince","email":"qiqiangvae@foxmail.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Quince?v=4","url":"https://github.com/Quince"}]},"filePathRelative":"notes/note/系统架构师/3.数据库.md","bulletin":false}');export{i as comp,l as data};
